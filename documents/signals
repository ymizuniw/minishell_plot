== Implicit Usage of Technical Words ==

    WORD(token)
        NAME(operator)

            list
    IFS

    // consider the rule to generation grammar.

    // 1. <cmd1> | <cmd2>
    // 2. <cmd1> && <cmd2>
    // 3. <cmd1> && (cmd2 && cmd3)
    // 4. < <cmd1>
    // 5. << <cmd1>
    // 6. <cmd1> > file_name
    // 7. <cmd1> >> file_name

    // 1.
    //         |
    // <cmd1>      <cmd2>

    // 2.
    //         &&
    // <cmd1>      <cmd2>

    // 3.
    //             &&
    // <cmd1>              &&
    //             <cmd2>      <cmd3>

    // token->type==LPAREN;
    // while (token->type!=RPAREN)
    //     cur = cur->next;

    // t_ast *node;
    // node->type = NODE_AND;
    // node->right = cmd5_node;
    // node->left = cmd_tree;
    // cmd_tree =  <cmd1> &&1 (subshell)
    // cmd_tree = &&1->left=<cmd1>, &&1->right=<subshell>

    // if type==NODE_CMD
    // t_cmd cmd = expand_token();
    // if type==NODE_*

    // 1.logical operator.2.pipe. 3.other.DEFINITIONS
       The following definitions are used throughout the rest of this document.
       blank  A space or tab.
       word   A sequence of characters considered as a single unit by the shell.  Also known as a token.
       name   A word consisting only of alphanumeric characters and underscores, and beginning with an alphabetic character or an
              underscore.  Also referred to as an identifier.
       metacharacter
              A character that, when unquoted, separates words.  One of the following:
              |  & ; ( ) < > space tab
       control operator
              A token that performs a control function.  It is one of the following symbols:
              || & && ; ;; ( ) | <newline>

RESERVED WORDS
       Reserved words are words that have a special meaning to the shell.  The following words are recognized as reserved when
       unquoted and either the first word of a simple command (see SHELL GRAMMAR below) or the third word of a case or for command:

       ! case  do done elif else esac fi for function if in select then until while { } time [[ ]]